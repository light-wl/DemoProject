<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.7.4</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>

    <modelVersion>4.0.0</modelVersion>
    <groupId>com.light</groupId>
    <artifactId>demo</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <packaging>pom</packaging>
    <name>demo</name>
    <description>demo</description>

    <!-- Maven 聚合的特点：
    现在有一个商城服务下面有两个模块，如果我们想要一次构建两个项目（模块），而不是到两个模块的目录下分别执行mvn命令。我们需要格外的名为hmall的模块，然后通过该模块构建整个项目的所有模块。
    同时这里的packaging，值为POM。而子包的packaging为jar。对于聚合模块来说，其打包方式packaging的值为POM，否则就无法构建。
    modules这是实现聚合的最核心的配置。用户可以通过在一个打包方式为pom的Maven项目中声明任意数量的module元素来实现模块的聚合。

    聚合与继承的关系：
    多模块maven项目中聚合与继承其实是两个概念，其目的完全不同。前者主要是为了方便快速构建项目，后者主要是为了消除重复配置。
    对于聚合模块来说，它知道有哪些被聚合的模块，但那些被聚合的模块不知道这个聚合模块的存在。
    对于继承关系的父POM来说，他不知道有哪些子模块继承于它，但那些子模块都必须知道自己的父POM是什么。
    共同点：
    聚合POM与继承关系的父POM的packaging都必须是pom，同时聚合模块与继承关系的父模块除了POM之外都没有实际内容。
    在现有的实际项目中，往往一个POM即是聚合POM，又是父POM。

    子模块间的调用：
    注意<groupId>是父工程的id，然后还要加个<version>和<scope>compile<scope>,重点
    -->
    <modules>
        <module>light-start</module>
        <module>light-common</module>
        <module>light-controller</module>
        <!--        <module>light-excel</module>-->
        <!--        <module>light-mq</module>-->
        <!--        <module>light-dubbo</module>-->
    </modules>

    <!--
    <properties>：归类依赖版本，某一类依赖使用同一个版本号可以抽出做公共变量。
    使用方式：${lombok.version}
    -->
    <properties>
        <lombok.version>1.18.30</lombok.version>
        <fastjson.version>1.2.83</fastjson.version>
    </properties>

    <!--
    1、<dependencyManagement>：用来管理jar包，可以在里面添加所有的jar包，并填写版本号，当子model需要引用时，可以不用填写版本号。
    这里并不会去下载jar包，只做管理用，只有子类用到了，才会真正下载。
    2、父POM通过<dependencyManagement>管理依赖，子POM引用不用加版本号，加了也可以，会覆盖父类的（这样就起不到管理的意义了）
    -->
    <dependencyManagement>
        <dependencies>
            <!--引入注解：@Slf4j-->
            <dependency>
                <groupId>org.projectlombok</groupId>
                <artifactId>lombok</artifactId>
                <version>${lombok.version}</version>
            </dependency>

            <!--    工具类依赖   -->
            <dependency>
                <groupId>com.alibaba</groupId>
                <artifactId>fastjson</artifactId>
                <version>${fastjson.version}</version>
            </dependency>

            <!-- 分页工具类 -->
<!--            <dependency>-->
<!--                <groupId>com.github.pagehelper</groupId>-->
<!--                <artifactId>pagehelper-spring-boot-starter</artifactId>-->
<!--                <version>1.2.10</version>-->
<!--            </dependency>-->


        </dependencies>
    </dependencyManagement>

    <!--
    父类 dependencies 的作用：
    1、对 starter 进行统一管理，统一调用；
    2、两个或以上的子模块有使用到的包，则可以抽出来放在父POM中统一管理，这里就是所有子POM的公共依赖
    -->
    <dependencies>
        <!--        @Slf4j日志抽象层的依赖      -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
        </dependency>

        <!--    工具类依赖   -->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>fastjson</artifactId>
        </dependency>
        <dependency>
            <groupId>com.google.code.gson</groupId>
            <artifactId>gson</artifactId>
        </dependency>

        <!--        Spring依赖开始        -->
        <!--Spring Controller（@RestController,@PostMapping,@Component等）中注解使用-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
            <version>2.1.5.RELEASE</version>
        </dependency>
        <!-- 切面aspect依赖 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-aop</artifactId>
        </dependency>
        <!--        Spring依赖结束        -->


        <!--        Dubbo 的依赖开始       -->
        <!--dubbo依赖（启动类要加@EnableDubbo，只能在启动类的pom中添加该包了）-->
        <!--        <dependency>-->
        <!--            <groupId>org.apache.dubbo</groupId>-->
        <!--            <artifactId>dubbo-spring-boot-starter</artifactId>-->
        <!--            <version>3.1.0</version>-->
        <!--        </dependency>-->
        <!--        Dubbo 的依赖结束       -->
    </dependencies>

</project>


        <!--
        问：当依赖冲突时如：A->B->C->X(1.0);A->D->X(2.0)，就需要选择一个了。
        答：Maven依赖调解的第一原则：路径最近者优先。当一样时，第二原则，第一声明者优先。
        -->